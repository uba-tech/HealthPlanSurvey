<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Module.Text" xml:space="preserve">
    <value>{"Name":"Package List","ConfigurationID":"12149414-4561-2372-1f6d-67bf2e66a378","searchItems":[],"queryItems":null,"listItems":null,"messageItems":[{"Index":1,"Level":0,"Parameters":{"LeftCondition":"'[Package,Q]'","RightCondition":"''","Operator":"=","IsAdvanced":"False"},"ActionType":"Condition-If","ChildActions":[{"Index":2,"Level":0,"Parameters":{"Name":"Control Header/Footer","RenderType":"1"},"ActionType":"Action-Region","ChildActions":[{"Index":3,"Level":0,"Parameters":{"Type":"CONTROL.HEADER","Name":"Variable Name","Value":"&lt;div id=\"owsInstaller\"&gt;\n&lt;script language=\"javascript\"&gt;\nfunction $() {\n\t\n\tvar elements = new Array();\n\tfor (var i = 0; i &lt; arguments.length; i++) {\n\t\tvar element = arguments[i];\n\t\tif (typeof element == 'string')\n\t\t\telement = document.getElementById(element);\n\t\tif (arguments.length == 1)\n\t\t\treturn element;\n\t\telements.push(element);\n\t}\n\treturn elements;\n}\nfunction pagecheck(itemid)\n{\n\tvar chk = $('pages'+itemid);\t\n\tvar target = $('resources'+itemid);\n\tif (!chk.checked)\n\t{\n\t\ttarget.innerHTML='';\n\t}\n\telse\n\t{\n\t\ttarget.innerHTML='';\t\t\n\t\tows.Fetch([ModuleId,System],-1,'resourceid='+itemid,target.id);\n\t}\n}\nfunction mzExp[*ModuleID](srcText, parentId, tagType, attributeName, showAll, showChild)\n{\n\t\n\tvar j=0;\n\tvar parentObj = $(parentId);\n\tif (parentObj){\n\t\tvar childTags = parentObj.getElementsByTagName(tagType);\n\t\tfor (var i = 0; i &lt; childTags.length; i++){\n\t\t\tvar childName = childTags[i].getAttribute(attributeName);\n\t\t\tif (childName){\n\t\t\t\tvar isExpander = (childName == srcText);\n\t\t\t\tvar isChildExpander = (showChild == true &amp;&amp; childTags[i].getAttribute(attributeName).indexOf(srcText) == 0);\n\t\t\t\tif (isExpander ||  isChildExpander ||  showAll == true){\n\t\t\t\t\tif (childTags[i].style.display != 'none'){\n\t\t\t\t\t\tif (isExpander){\n\t\t\t\t\t\t childTags[i].style.display='none';\n\t\t\t\t\t\t if($(childName) != null) $(childName).style.backgroundImage = 'url([APPLICATIONPATH,SYSTEM]/images/rt.gif)';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tchildTags[i].style.display = 'block'; \n\t\t\t\t\t\tif($(childName) != null) $(childName).style.backgroundImage = 'url([APPLICATIONPATH,SYSTEM]/images/dn.gif)';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n&lt;/Script&gt;\n&lt;input type=\"hidden\" name=\"hidden1\" ID=\"hidden1\" value=\"\" /&gt;\n\n&lt;Style&gt;\n#mzTree {padding-left:2px;}\n#mzTree .exp {margin-right:5px; float:left; width:32px; height:13; }\n#mzTree .closed {background: url(\"[APPLICATIONPATH,SYSTEM]/images/rt.gif\")  no-repeat; cursor:pointer;}\n#mzTree .open {background: url(\"[APPLICATIONPATH,SYSTEM]/images/dn.gif\")  no-repeat; cursor:pointer;}\n#mzTree .empty {background: url(\"[APPLICATIONPATH,SYSTEM]/images/spacer.gif\")  no-repeat; }\n#mzTree DIV.group {margin-left:18px; clear:both;}\n#mzTree DIV.nav { float: left;}\n#mzTree DIV.name {}\n#mzTree SPAN.nav { }\n#mzTree a, #mzTree  a:link, #mzTree a:active, #mzTree a:visited, #mzTree a:hover\n{color:#333; font-size:11px; font-family:tahoma; text-decoration:none; padding-left:0;}\n#mzTree a:hover {text-decoration:underline;}\n#mzTree .fldr {clear:both; margin-top:0px; }\n&lt;/Style&gt;\n&lt;!-- BEGIN Choose Documents --&gt;\n&lt;table style=\"width: 100%;\"&gt;\n&lt;tr&gt;\n\t&lt;td class=\"SubHead\" width=\"100\"&gt;Install Package:&lt;/td&gt;&lt;td&gt;&lt;input type=\"file\" id=\"frmInstallFile\" name=\"frmInstallFile\" /&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;hr /&gt;\n&lt;center class=\"SubHead\"&gt;OR&lt;/center&gt;\n&lt;hr /&gt;\n&lt;table style=\"width: 100%;\"&gt;\n&lt;tr&gt;\n\t&lt;td class=\"SubHead\" width=\"100\"&gt;Create Package:&lt;/td&gt;&lt;td&gt;&lt;input type=\"textbox\" id=\"frmInstallFileName\" name=\"frmInstallFileName\" style=\"width:100%;\" /&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n\t&lt;td class=\"SubHead\" width=\"100\"&gt;Version:&lt;/td&gt;&lt;td&gt;&lt;input type=\"textbox\" id=\"frmInstallFileVersion\" name=\"frmInstallFileVersion\" style=\"width:100%;\"/&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n\t&lt;td class=\"SubHead\" width=\"100\"&gt;Items:&lt;/td&gt;&lt;td&gt;\n&lt;Table style=\"WIDTH: 100%;\"&gt;\n\t&lt;tr&gt;\n\t\t&lt;td id=mzTree &gt;\n\n","SkipProcessing":"false","AssignmentType":"0"},"ActionType":"Action-Assignment","ChildActions":[]},{"Index":4,"Level":0,"Parameters":{"Type":"CONTROL.FOOTER","Name":"Variable Name","Value":"\t\t&lt;/td&gt;\n\t&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n\n&lt;center&gt;&lt;button onclick=\"{ACTION,Export,Package,,M,False};return false;\"&gt;Ok&lt;/button&gt;&lt;button onclick=\"{ACTION,Cancel,Package,,M,False};return false;\"&gt;Cancel&lt;/button&gt;&lt;/center&gt;\n&lt;/div&gt;\n","SkipProcessing":"false","AssignmentType":"0"},"ActionType":"Action-Assignment","ChildActions":[]}]},{"Index":5,"Level":0,"Parameters":{"Name":"Query Variables and Default Formatting","RenderType":"0"},"ActionType":"Action-Region","ChildActions":[{"Index":6,"Level":0,"Parameters":{"Name":"Query Variable Definitions","RenderType":"0"},"ActionType":"Action-Region","ChildActions":[{"Index":7,"Level":0,"Parameters":{"Index":3,"VariableType":"&lt;Form&gt;","QuerySource":"OpenFldrs","QueryTarget":"[myOpenFldrs]","QueryTargetLeft":"","QueryTargetRight":"","QueryTargetEmpty":"NoVal","Protected":true,"EscapeHTML":false,"EscapeListX":1,"Value":"Declare\n@ScopeID int, @ShowHidden int, @Depth int, @ItemID int, @CurrentNode varchar(100), @Currentlvl int, @RootLevel tinyint  \n\n-- These two settings must correllate to the content query you are using\nSET @ScopeID = [PortalID,System] -- PortalID for Tabs, ModuleID for Help_Category. \nSET @RootLevel = 0 -- Tabs is 0, Help_Category is 1\n\nSET @ShowHidden = 1\nSET @Depth = 1 -- levels of tree or branch that are retrieved in a single response. If set to \"2\" then every other level would use and AJAX fetch. If \"3\", then every third. If set to \"1\" the tree would be entirely AJAX driven.\nSET @ItemID = @id\nSET @CurrentNode = '@node'\nSET @Currentlvl = @level\n\ndeclare @ParentNode varchar(500)\nset @ParentNode = LEFT(@CurrentNode,PATINDEX('%.[0-9][0-9].[0-9][0-9].',@CurrentNode))\n\n\nDeclare @treeOrdered TABLE(\nOrderedId int identity primary key,\nItemID int not null,\nlvl int, \nNextLvl int,\nPath varchar(2000),\n[Name] varchar(50),\nHasChild tinyint\n,ParentItemID int,\nplvl int,\npPath varchar(2000),\nParentParentItemID int,\nppPath varchar(2000),\nShowTab bit,\nDisplayType int,\nTabID int\n)\n\ndeclare @tree table(\nTreeId int identity primary key,\nItemID int not null,\nlvl int, \nNextLvl Int,\nParentTreeId int,\nPath varchar(2000),\nItemID_Path varchar(2000),\n[Name] varchar(50),\n[Order] int, \nVisible int,\nDeleted int,\nHasChild tinyint,\nOrderedId int\n,ParentItemID int,\nShowTab bit,\nDisplayType int,\nTabID int\n) \n\n\ndeclare @rowcount int, @lvl int, @RootParentID int,  @intCounter int\n\nSet @intCounter = 0\nSet @RootParentID = CASE WHEN @ItemID IS NOT NULL THEN @ItemID ELSE -1 END -- ELSE value must reflect the parentID value for root items. NULL is already handled\nset @lvl= ISNULL(@Currentlvl,0) + @RootLevel + CASE WHEN @ItemID IS NOT NULL AND @RootLevel = 0 THEN 1 ELSE 0 END\nSet @Depth = @Depth + ISNULL(@Currentlvl,0) + @RootLevel +  CASE WHEN @ItemID IS NOT NULL AND @RootLevel = 0 THEN 1 ELSE 0 END\n\ninsert into @tree(ItemID,lvl) values (@RootParentID,@lvl)\n\nset @rowcount=@@ROWCOUNT\n\n\nupdate @tree set Path=str(TreeId,10,0) + '.', ItemID_Path=cast(ItemID as varchar(10)) + '/'\n\nwhile @rowcount&gt;0 \nbegin\n\n\t\tinsert into @tree(ItemID, lvl, ParentTreeId, [Name], [Order], Visible, Deleted, HasChild,ParentItemID,ShowTab,DisplayType,TabID)\n\n---------- Begin Content Query  -------  Be sure to @ScopeID &amp; @RootLevel properly reflect the active query ---------------\n-- Query for Tabs\n\t\tselect \n\t\t\tc.TabID,\n\t\t\tc.[Level],\n\t\t\tt.treeId, \n\t\t\tc.TabName, \n\t\t\tc.TabOrder,\n\t\t\tc.IsVisible,\n\t\t\tc.IsDeleted,\n\t\t\tCASE WHEN c.[Level] = (@Depth - 1) THEN CASE WHEN (Select TOP 1 '1' from [databaseOwner,System][objectQualifier,System]Tabs t Where t.ParentID = c.TabID)= 1 THEN 1 ELSE 0 END ELSE NULL END,\n\t\t\tc.ParentId,\n\t\t\tc.IsVisible,\n\t\t\tc.IsVisible,\n\t\t\tc.TabID\n\t\tfrom \n\t\t\t[databaseOwner,System][objectQualifier,System]Tabs c\n\t\t\t\tInner Join @tree t \n\t\t\t\t\ton t.ItemID = ISNULL(c.ParentID,-1)\n\t\twhere \n\t\t\tc.PortalID = @ScopeID \n\t\t\tAND c.IsDeleted = 0 \n\t\t\tAND c.[Level] &lt; @Depth \n\t\t\tAND  c.[Level] = @lvl\n\t\t\tAND TabOrder &lt; 10000\n\t\torder by c.TabOrder,c.TabName, c.[level]\n\n----------- End Content Query   -------\n\n\tupdate t1 set t1.Path=t2.Path + str(t1.TreeId,10,0)+'.', \n\t\t      t1.ItemID_Path=t2.ItemID_Path + cast(t1.ItemID as varchar(10))+'/'\n\t\tfrom @tree t1 inner join @tree t2 on t1.ParentTreeId=t2.TreeId\n\t\twhere t1.lvl=@lvl and t2.ItemID_Path not like  cast(t1.ItemID as varchar(10)) + '/%'\n\t\n\tset @rowcount=@@ROWCOUNT\n\tset @lvl=@lvl+1\t\n\nend\n\nInsert into @treeOrdered (ItemID,lvl,Path,[Name],HasChild,ShowTab,DisplayType,TabID)\nSelect  ItemID, lvl, REPLACE(REPLACE(Path,'        ',''),' ',0), [Name], HasChild,ShowTab,DisplayType,TabID From @tree order by Path\n\nUpdate t4 Set NextLvl = t5.lvl\nFrom @treeOrdered t4 inner join @treeOrdered t5 ON (t4.OrderedId + 1) = t5.OrderedId\n\nUpdate o set o.ParentItemID = t.ItemID, o.pPath =@CurrentNode , o.pLvl = t.Lvl - 1\nFROM @treeOrdered o JOIN @tree x on x.ItemID = o.ItemID\nJOIN @tree t on t.ItemID = x.ParentItemID\n\ndeclare @ParentParentItemID varchar(10)\nselect @ParentParentItemID = p.ParentID from tabs c\nJOIN  tabs p on\nc.TabID = @RootParentID and p.TabID = c.ParentID\n\nSET @ParentParentItemID = CASE WHEN @ParentParentItemID  is null THEN '' ELSE @ParentParentItemID  END\n\nSelect \n\tisDefault = CASE WHEN isnull(t.DisplayType,0)=0 then 'selected' ELSE '' END,\n\tisLinks = CASE WHEN isnull(t.DisplayType,0)=1 then 'selected' ELSE '' END,\n\tisImages = CASE WHEN isnull(t.DisplayType,0)=1 then 'selected' ELSE '' END,\n\tisCheckedI = CASE WHEN isnull(t.ShowTab,0)=0 THEN '&lt;i&gt;' ELSE '' END,\n\tisCheckedEI = CASE WHEN isnull(t.ShowTab,0)=0 THEN '&lt;/i&gt;' ELSE '' END,\n\tisChecked = CASE WHEN isnull(t.ShowTab,0)=1 THEN 'checked' else '' END,\n\tnpPath = CASE WHEN pPath is null THEN 'mzTree' ELSE 'g[ModuleID,System]' + pPath END,\n\tnppPath = 'mzTree', \n\tItemEditor = CASE WHEN @edit = ItemID THEN '\\[EditSyntax,Action\\]' ELSE '&lt;div class=''name''&gt;&lt;a href=# onclick=\"document.getElementById(''nav[nPath]'').style.display = ''block'';return false;\"&gt;\\[isCheckedI\\]' +  [Name] +  '\\[isCheckedEI\\]&lt;/a&gt;&lt;/div&gt;&lt;div id=nav[nPath] style=''display: none;''&gt;[actionitem]&lt;/div&gt;' END,\n\tSaveItem = CASE WHEN @edit = ItemID THEN '&lt;br&gt;&lt;center&gt;&lt;a class=CommandButton href=# onclick=\"if(document.getElementById(''gAddName[ItemID]'').value == '''') {alert(''Name can not be blank.'');}  else {lxFetch([ModuleID,System],CURRENTPAGE[ModuleID,System],''save=\\[ItemID\\]&amp;node=[pPath]&amp;id=[ParentItemID]&amp;lvl=[plvl]'',''[npPath]'');}\" &gt;Save&lt;/a&gt; | &lt;a class=CommandButton href=\"javascript:lxFetch([ModuleID,System],CURRENTPAGE[ModuleID,System],''node=[pPath]&amp;id=[ParentItemID]&amp;lvl=[plvl]'',''[npPath]'');\" &gt;Cancel&lt;/a&gt;&lt;/center&gt;' ELSE '' END,\n\tActionItem = '\\[ActionSyntax,Action\\]',\n\tItem = '&lt;span id=\"s[ModuleID,System][nPath]\"&gt;&lt;div class=fldr&gt;' +\n\t\t\tCASE WHEN (NextLvl &gt; Lvl) OR (HasChild = 1)\n\t\t\t\tTHEN '&lt;div class=\"exp closed\" id=\"[ModuleID,System][nPath]\" ' + \n\t\t\t\t\t CASE WHEN (HasChild = 1) \n\t\t\t\t\t  THEN 'onclick=\"if (this.style.display !=''block'') lxFetch([*ModuleID],0,''node=[nPath]&amp;id=[ItemID]&amp;lvl=[lvl]'',''g[ModuleID,System][nPath]''); mzExp[ModuleID,System](''[ModuleID,System][nPath]'',''s[ModuleID,System][nPath]'',''DIV'',''group'',false,false,false);\"' \n\t\t\t\t\t  ELSE 'onclick=\"mzExp[ModuleID,System](''[ModuleID,System][nPath]'',''s[ModuleID,System][nPath]'',''DIV'',''group'',false,false,false);' \n\t\t\t\t\t END \n\t\t\t\t+ '\" &gt;&lt;/div&gt;'\n\t\t\t\tELSE '&lt;div class=\"exp empty\" &gt;&lt;/div&gt;' \n\t\t\tEND \n\t\t\t+ '[ItemEditor][SaveItem]&lt;/div&gt;' +\n\t\t\tCASE WHEN (NextLvl &gt; Lvl) OR (HasChild = 1) \n\t\t\t\t THEN '&lt;div id=\"g[ModuleID,System][nPath]\" class=\"group\" Style=\"display:none;\" group=\"[ModuleID,System][nPath]\"&gt;'  \n\t\t\t\t ELSE '' \n\t\t\tEND +\n\t\t\tCASE WHEN (HasChild = 1) \n\t\t\t\t THEN '&lt;/div&gt;' \n\t\t\t\t ELSE CASE WHEN (NextLvl &lt; Lvl) \n\t\t\t\t\t   THEN REPLICATE ('&lt;/div&gt;',Lvl - NextLvl) \n\t\t\t\t\t   ELSE '' \n\t\t\t\t  END \n\t\t\t\t END + '&lt;/span&gt;',\n\tnPath = @CurrentNode + Path,\n * \nfrom \n\t@treeOrdered t \nWhere \n\tItemID &lt;&gt; @RootParentID"},"ActionType":"Template-Variable","ChildActions":[]},{"Index":8,"Level":0,"Parameters":{"Index":10,"VariableType":"&lt;Custom&gt;","QuerySource":"http://[ALIAS,System]","QueryTarget":"@AppPath","QueryTargetLeft":"","QueryTargetRight":"","QueryTargetEmpty":"","Protected":true,"EscapeHTML":false,"EscapeListX":1,"Value":"Declare\n@ScopeID int, @ShowHidden int, @Depth int, @ItemID int, @CurrentNode varchar(100), @Currentlvl int, @RootLevel tinyint  \n\n-- These two settings must correllate to the content query you are using\nSET @ScopeID = [PortalID,System] -- PortalID for Tabs, ModuleID for Help_Category. \nSET @RootLevel = 0 -- Tabs is 0, Help_Category is 1\n\nSET @ShowHidden = 1\nSET @Depth = 1 -- levels of tree or branch that are retrieved in a single response. If set to \"2\" then every other level would use and AJAX fetch. If \"3\", then every third. If set to \"1\" the tree would be entirely AJAX driven.\nSET @ItemID = @id\nSET @CurrentNode = '@node'\nSET @Currentlvl = @level\n\ndeclare @ParentNode varchar(500)\nset @ParentNode = LEFT(@CurrentNode,PATINDEX('%.[0-9][0-9].[0-9][0-9].',@CurrentNode))\n\n\nDeclare @treeOrdered TABLE(\nOrderedId int identity primary key,\nItemID int not null,\nlvl int, \nNextLvl int,\nPath varchar(2000),\n[Name] varchar(50),\nHasChild tinyint\n,ParentItemID int,\nplvl int,\npPath varchar(2000),\nParentParentItemID int,\nppPath varchar(2000),\nShowTab bit,\nDisplayType int,\nTabID int\n)\n\ndeclare @tree table(\nTreeId int identity primary key,\nItemID int not null,\nlvl int, \nNextLvl Int,\nParentTreeId int,\nPath varchar(2000),\nItemID_Path varchar(2000),\n[Name] varchar(50),\n[Order] int, \nVisible int,\nDeleted int,\nHasChild tinyint,\nOrderedId int\n,ParentItemID int,\nShowTab bit,\nDisplayType int,\nTabID int\n) \n\n\ndeclare @rowcount int, @lvl int, @RootParentID int,  @intCounter int\n\nSet @intCounter = 0\nSet @RootParentID = CASE WHEN @ItemID IS NOT NULL THEN @ItemID ELSE -1 END -- ELSE value must reflect the parentID value for root items. NULL is already handled\nset @lvl= ISNULL(@Currentlvl,0) + @RootLevel + CASE WHEN @ItemID IS NOT NULL AND @RootLevel = 0 THEN 1 ELSE 0 END\nSet @Depth = @Depth + ISNULL(@Currentlvl,0) + @RootLevel +  CASE WHEN @ItemID IS NOT NULL AND @RootLevel = 0 THEN 1 ELSE 0 END\n\ninsert into @tree(ItemID,lvl) values (@RootParentID,@lvl)\n\nset @rowcount=@@ROWCOUNT\n\n\nupdate @tree set Path=str(TreeId,10,0) + '.', ItemID_Path=cast(ItemID as varchar(10)) + '/'\n\nwhile @rowcount&gt;0 \nbegin\n\n\t\tinsert into @tree(ItemID, lvl, ParentTreeId, [Name], [Order], Visible, Deleted, HasChild,ParentItemID,ShowTab,DisplayType,TabID)\n\n---------- Begin Content Query  -------  Be sure to @ScopeID &amp; @RootLevel properly reflect the active query ---------------\n-- Query for Tabs\n\t\tselect \n\t\t\tc.TabID,\n\t\t\tc.[Level],\n\t\t\tt.treeId, \n\t\t\tc.TabName, \n\t\t\tc.TabOrder,\n\t\t\tc.IsVisible,\n\t\t\tc.IsDeleted,\n\t\t\tCASE WHEN c.[Level] = (@Depth - 1) THEN CASE WHEN (Select TOP 1 '1' from [databaseOwner,System][objectQualifier,System]Tabs t Where t.ParentID = c.TabID)= 1 THEN 1 ELSE 0 END ELSE NULL END,\n\t\t\tc.ParentId,\n\t\t\tc.IsVisible,\n\t\t\tc.IsVisible,\n\t\t\tc.TabID\n\t\tfrom \n\t\t\t[databaseOwner,System][objectQualifier,System]Tabs c\n\t\t\t\tInner Join @tree t \n\t\t\t\t\ton t.ItemID = ISNULL(c.ParentID,-1)\n\t\twhere \n\t\t\tc.PortalID = @ScopeID \n\t\t\tAND c.IsDeleted = 0 \n\t\t\tAND c.[Level] &lt; @Depth \n\t\t\tAND  c.[Level] = @lvl\n\t\t\tAND TabOrder &lt; 10000\n\t\torder by c.TabOrder,c.TabName, c.[level]\n\n----------- End Content Query   -------\n\n\tupdate t1 set t1.Path=t2.Path + str(t1.TreeId,10,0)+'.', \n\t\t      t1.ItemID_Path=t2.ItemID_Path + cast(t1.ItemID as varchar(10))+'/'\n\t\tfrom @tree t1 inner join @tree t2 on t1.ParentTreeId=t2.TreeId\n\t\twhere t1.lvl=@lvl and t2.ItemID_Path not like  cast(t1.ItemID as varchar(10)) + '/%'\n\t\n\tset @rowcount=@@ROWCOUNT\n\tset @lvl=@lvl+1\t\n\nend\n\nInsert into @treeOrdered (ItemID,lvl,Path,[Name],HasChild,ShowTab,DisplayType,TabID)\nSelect  ItemID, lvl, REPLACE(REPLACE(Path,'        ',''),' ',0), [Name], HasChild,ShowTab,DisplayType,TabID From @tree order by Path\n\nUpdate t4 Set NextLvl = t5.lvl\nFrom @treeOrdered t4 inner join @treeOrdered t5 ON (t4.OrderedId + 1) = t5.OrderedId\n\nUpdate o set o.ParentItemID = t.ItemID, o.pPath =@CurrentNode , o.pLvl = t.Lvl - 1\nFROM @treeOrdered o JOIN @tree x on x.ItemID = o.ItemID\nJOIN @tree t on t.ItemID = x.ParentItemID\n\ndeclare @ParentParentItemID varchar(10)\nselect @ParentParentItemID = p.ParentID from tabs c\nJOIN  tabs p on\nc.TabID = @RootParentID and p.TabID = c.ParentID\n\nSET @ParentParentItemID = CASE WHEN @ParentParentItemID  is null THEN '' ELSE @ParentParentItemID  END\n\nSelect \n\tisDefault = CASE WHEN isnull(t.DisplayType,0)=0 then 'selected' ELSE '' END,\n\tisLinks = CASE WHEN isnull(t.DisplayType,0)=1 then 'selected' ELSE '' END,\n\tisImages = CASE WHEN isnull(t.DisplayType,0)=1 then 'selected' ELSE '' END,\n\tisCheckedI = CASE WHEN isnull(t.ShowTab,0)=0 THEN '&lt;i&gt;' ELSE '' END,\n\tisCheckedEI = CASE WHEN isnull(t.ShowTab,0)=0 THEN '&lt;/i&gt;' ELSE '' END,\n\tisChecked = CASE WHEN isnull(t.ShowTab,0)=1 THEN 'checked' else '' END,\n\tnpPath = CASE WHEN pPath is null THEN 'mzTree' ELSE 'g[ModuleID,System]' + pPath END,\n\tnppPath = 'mzTree', \n\tItemEditor = CASE WHEN @edit = ItemID THEN '\\[EditSyntax,Action\\]' ELSE '&lt;div class=''name''&gt;&lt;a href=# onclick=\"document.getElementById(''nav[nPath]'').style.display = ''block'';return false;\"&gt;\\[isCheckedI\\]' +  [Name] +  '\\[isCheckedEI\\]&lt;/a&gt;&lt;/div&gt;&lt;div id=nav[nPath] style=''display: none;''&gt;[actionitem]&lt;/div&gt;' END,\n\tSaveItem = CASE WHEN @edit = ItemID THEN '&lt;br&gt;&lt;center&gt;&lt;a class=CommandButton href=# onclick=\"if(document.getElementById(''gAddName[ItemID]'').value == '''') {alert(''Name can not be blank.'');}  else {lxFetch([ModuleID,System],CURRENTPAGE[ModuleID,System],''save=\\[ItemID\\]&amp;node=[pPath]&amp;id=[ParentItemID]&amp;lvl=[plvl]'',''[npPath]'');}\" &gt;Save&lt;/a&gt; | &lt;a class=CommandButton href=\"javascript:lxFetch([ModuleID,System],CURRENTPAGE[ModuleID,System],''node=[pPath]&amp;id=[ParentItemID]&amp;lvl=[plvl]'',''[npPath]'');\" &gt;Cancel&lt;/a&gt;&lt;/center&gt;' ELSE '' END,\n\tActionItem = '\\[ActionSyntax,Action\\]',\n\tItem = '&lt;span id=\"s[ModuleID,System][nPath]\"&gt;&lt;div class=fldr&gt;' +\n\t\t\tCASE WHEN (NextLvl &gt; Lvl) OR (HasChild = 1)\n\t\t\t\tTHEN '&lt;div class=\"exp closed\" id=\"[ModuleID,System][nPath]\" ' + \n\t\t\t\t\t CASE WHEN (HasChild = 1) \n\t\t\t\t\t  THEN 'onclick=\"if (this.style.display !=''block'') lxFetch([*ModuleID],0,''node=[nPath]&amp;id=[ItemID]&amp;lvl=[lvl]'',''g[ModuleID,System][nPath]''); mzExp[ModuleID,System](''[ModuleID,System][nPath]'',''s[ModuleID,System][nPath]'',''DIV'',''group'',false,false,false);\"' \n\t\t\t\t\t  ELSE 'onclick=\"mzExp[ModuleID,System](''[ModuleID,System][nPath]'',''s[ModuleID,System][nPath]'',''DIV'',''group'',false,false,false);' \n\t\t\t\t\t END \n\t\t\t\t+ '\" &gt;&lt;/div&gt;'\n\t\t\t\tELSE '&lt;div class=\"exp empty\" &gt;&lt;/div&gt;' \n\t\t\tEND \n\t\t\t+ '[ItemEditor][SaveItem]&lt;/div&gt;' +\n\t\t\tCASE WHEN (NextLvl &gt; Lvl) OR (HasChild = 1) \n\t\t\t\t THEN '&lt;div id=\"g[ModuleID,System][nPath]\" class=\"group\" Style=\"display:none;\" group=\"[ModuleID,System][nPath]\"&gt;'  \n\t\t\t\t ELSE '' \n\t\t\tEND +\n\t\t\tCASE WHEN (HasChild = 1) \n\t\t\t\t THEN '&lt;/div&gt;' \n\t\t\t\t ELSE CASE WHEN (NextLvl &lt; Lvl) \n\t\t\t\t\t   THEN REPLICATE ('&lt;/div&gt;',Lvl - NextLvl) \n\t\t\t\t\t   ELSE '' \n\t\t\t\t  END \n\t\t\t\t END + '&lt;/span&gt;',\n\tnPath = @CurrentNode + Path,\n * \nfrom \n\t@treeOrdered t \nWhere \n\tItemID &lt;&gt; @RootParentID"},"ActionType":"Template-Variable","ChildActions":[]},{"Index":9,"Level":0,"Parameters":{"Index":11,"VariableType":"&lt;QueryString&gt;","QuerySource":"lvl","QueryTarget":"@level","QueryTargetLeft":"","QueryTargetRight":"","QueryTargetEmpty":"NULL","Protected":true,"EscapeHTML":false,"EscapeListX":1,"Value":"Declare\n@ScopeID int, @ShowHidden int, @Depth int, @ItemID int, @CurrentNode varchar(100), @Currentlvl int, @RootLevel tinyint  \n\n-- These two settings must correllate to the content query you are using\nSET @ScopeID = [PortalID,System] -- PortalID for Tabs, ModuleID for Help_Category. \nSET @RootLevel = 0 -- Tabs is 0, Help_Category is 1\n\nSET @ShowHidden = 1\nSET @Depth = 1 -- levels of tree or branch that are retrieved in a single response. If set to \"2\" then every other level would use and AJAX fetch. If \"3\", then every third. If set to \"1\" the tree would be entirely AJAX driven.\nSET @ItemID = @id\nSET @CurrentNode = '@node'\nSET @Currentlvl = @level\n\ndeclare @ParentNode varchar(500)\nset @ParentNode = LEFT(@CurrentNode,PATINDEX('%.[0-9][0-9].[0-9][0-9].',@CurrentNode))\n\n\nDeclare @treeOrdered TABLE(\nOrderedId int identity primary key,\nItemID int not null,\nlvl int, \nNextLvl int,\nPath varchar(2000),\n[Name] varchar(50),\nHasChild tinyint\n,ParentItemID int,\nplvl int,\npPath varchar(2000),\nParentParentItemID int,\nppPath varchar(2000),\nShowTab bit,\nDisplayType int,\nTabID int\n)\n\ndeclare @tree table(\nTreeId int identity primary key,\nItemID int not null,\nlvl int, \nNextLvl Int,\nParentTreeId int,\nPath varchar(2000),\nItemID_Path varchar(2000),\n[Name] varchar(50),\n[Order] int, \nVisible int,\nDeleted int,\nHasChild tinyint,\nOrderedId int\n,ParentItemID int,\nShowTab bit,\nDisplayType int,\nTabID int\n) \n\n\ndeclare @rowcount int, @lvl int, @RootParentID int,  @intCounter int\n\nSet @intCounter = 0\nSet @RootParentID = CASE WHEN @ItemID IS NOT NULL THEN @ItemID ELSE -1 END -- ELSE value must reflect the parentID value for root items. NULL is already handled\nset @lvl= ISNULL(@Currentlvl,0) + @RootLevel + CASE WHEN @ItemID IS NOT NULL AND @RootLevel = 0 THEN 1 ELSE 0 END\nSet @Depth = @Depth + ISNULL(@Currentlvl,0) + @RootLevel +  CASE WHEN @ItemID IS NOT NULL AND @RootLevel = 0 THEN 1 ELSE 0 END\n\ninsert into @tree(ItemID,lvl) values (@RootParentID,@lvl)\n\nset @rowcount=@@ROWCOUNT\n\n\nupdate @tree set Path=str(TreeId,10,0) + '.', ItemID_Path=cast(ItemID as varchar(10)) + '/'\n\nwhile @rowcount&gt;0 \nbegin\n\n\t\tinsert into @tree(ItemID, lvl, ParentTreeId, [Name], [Order], Visible, Deleted, HasChild,ParentItemID,ShowTab,DisplayType,TabID)\n\n---------- Begin Content Query  -------  Be sure to @ScopeID &amp; @RootLevel properly reflect the active query ---------------\n-- Query for Tabs\n\t\tselect \n\t\t\tc.TabID,\n\t\t\tc.[Level],\n\t\t\tt.treeId, \n\t\t\tc.TabName, \n\t\t\tc.TabOrder,\n\t\t\tc.IsVisible,\n\t\t\tc.IsDeleted,\n\t\t\tCASE WHEN c.[Level] = (@Depth - 1) THEN CASE WHEN (Select TOP 1 '1' from [databaseOwner,System][objectQualifier,System]Tabs t Where t.ParentID = c.TabID)= 1 THEN 1 ELSE 0 END ELSE NULL END,\n\t\t\tc.ParentId,\n\t\t\tc.IsVisible,\n\t\t\tc.IsVisible,\n\t\t\tc.TabID\n\t\tfrom \n\t\t\t[databaseOwner,System][objectQualifier,System]Tabs c\n\t\t\t\tInner Join @tree t \n\t\t\t\t\ton t.ItemID = ISNULL(c.ParentID,-1)\n\t\twhere \n\t\t\tc.PortalID = @ScopeID \n\t\t\tAND c.IsDeleted = 0 \n\t\t\tAND c.[Level] &lt; @Depth \n\t\t\tAND  c.[Level] = @lvl\n\t\t\tAND TabOrder &lt; 10000\n\t\torder by c.TabOrder,c.TabName, c.[level]\n\n----------- End Content Query   -------\n\n\tupdate t1 set t1.Path=t2.Path + str(t1.TreeId,10,0)+'.', \n\t\t      t1.ItemID_Path=t2.ItemID_Path + cast(t1.ItemID as varchar(10))+'/'\n\t\tfrom @tree t1 inner join @tree t2 on t1.ParentTreeId=t2.TreeId\n\t\twhere t1.lvl=@lvl and t2.ItemID_Path not like  cast(t1.ItemID as varchar(10)) + '/%'\n\t\n\tset @rowcount=@@ROWCOUNT\n\tset @lvl=@lvl+1\t\n\nend\n\nInsert into @treeOrdered (ItemID,lvl,Path,[Name],HasChild,ShowTab,DisplayType,TabID)\nSelect  ItemID, lvl, REPLACE(REPLACE(Path,'        ',''),' ',0), [Name], HasChild,ShowTab,DisplayType,TabID From @tree order by Path\n\nUpdate t4 Set NextLvl = t5.lvl\nFrom @treeOrdered t4 inner join @treeOrdered t5 ON (t4.OrderedId + 1) = t5.OrderedId\n\nUpdate o set o.ParentItemID = t.ItemID, o.pPath =@CurrentNode , o.pLvl = t.Lvl - 1\nFROM @treeOrdered o JOIN @tree x on x.ItemID = o.ItemID\nJOIN @tree t on t.ItemID = x.ParentItemID\n\ndeclare @ParentParentItemID varchar(10)\nselect @ParentParentItemID = p.ParentID from tabs c\nJOIN  tabs p on\nc.TabID = @RootParentID and p.TabID = c.ParentID\n\nSET @ParentParentItemID = CASE WHEN @ParentParentItemID  is null THEN '' ELSE @ParentParentItemID  END\n\nSelect \n\tisDefault = CASE WHEN isnull(t.DisplayType,0)=0 then 'selected' ELSE '' END,\n\tisLinks = CASE WHEN isnull(t.DisplayType,0)=1 then 'selected' ELSE '' END,\n\tisImages = CASE WHEN isnull(t.DisplayType,0)=1 then 'selected' ELSE '' END,\n\tisCheckedI = CASE WHEN isnull(t.ShowTab,0)=0 THEN '&lt;i&gt;' ELSE '' END,\n\tisCheckedEI = CASE WHEN isnull(t.ShowTab,0)=0 THEN '&lt;/i&gt;' ELSE '' END,\n\tisChecked = CASE WHEN isnull(t.ShowTab,0)=1 THEN 'checked' else '' END,\n\tnpPath = CASE WHEN pPath is null THEN 'mzTree' ELSE 'g[ModuleID,System]' + pPath END,\n\tnppPath = 'mzTree', \n\tItemEditor = CASE WHEN @edit = ItemID THEN '\\[EditSyntax,Action\\]' ELSE '&lt;div class=''name''&gt;&lt;a href=# onclick=\"document.getElementById(''nav[nPath]'').style.display = ''block'';return false;\"&gt;\\[isCheckedI\\]' +  [Name] +  '\\[isCheckedEI\\]&lt;/a&gt;&lt;/div&gt;&lt;div id=nav[nPath] style=''display: none;''&gt;[actionitem]&lt;/div&gt;' END,\n\tSaveItem = CASE WHEN @edit = ItemID THEN '&lt;br&gt;&lt;center&gt;&lt;a class=CommandButton href=# onclick=\"if(document.getElementById(''gAddName[ItemID]'').value == '''') {alert(''Name can not be blank.'');}  else {lxFetch([ModuleID,System],CURRENTPAGE[ModuleID,System],''save=\\[ItemID\\]&amp;node=[pPath]&amp;id=[ParentItemID]&amp;lvl=[plvl]'',''[npPath]'');}\" &gt;Save&lt;/a&gt; | &lt;a class=CommandButton href=\"javascript:lxFetch([ModuleID,System],CURRENTPAGE[ModuleID,System],''node=[pPath]&amp;id=[ParentItemID]&amp;lvl=[plvl]'',''[npPath]'');\" &gt;Cancel&lt;/a&gt;&lt;/center&gt;' ELSE '' END,\n\tActionItem = '\\[ActionSyntax,Action\\]',\n\tItem = '&lt;span id=\"s[ModuleID,System][nPath]\"&gt;&lt;div class=fldr&gt;' +\n\t\t\tCASE WHEN (NextLvl &gt; Lvl) OR (HasChild = 1)\n\t\t\t\tTHEN '&lt;div class=\"exp closed\" id=\"[ModuleID,System][nPath]\" ' + \n\t\t\t\t\t CASE WHEN (HasChild = 1) \n\t\t\t\t\t  THEN 'onclick=\"if (this.style.display !=''block'') lxFetch([*ModuleID],0,''node=[nPath]&amp;id=[ItemID]&amp;lvl=[lvl]'',''g[ModuleID,System][nPath]''); mzExp[ModuleID,System](''[ModuleID,System][nPath]'',''s[ModuleID,System][nPath]'',''DIV'',''group'',false,false,false);\"' \n\t\t\t\t\t  ELSE 'onclick=\"mzExp[ModuleID,System](''[ModuleID,System][nPath]'',''s[ModuleID,System][nPath]'',''DIV'',''group'',false,false,false);' \n\t\t\t\t\t END \n\t\t\t\t+ '\" &gt;&lt;/div&gt;'\n\t\t\t\tELSE '&lt;div class=\"exp empty\" &gt;&lt;/div&gt;' \n\t\t\tEND \n\t\t\t+ '[ItemEditor][SaveItem]&lt;/div&gt;' +\n\t\t\tCASE WHEN (NextLvl &gt; Lvl) OR (HasChild = 1) \n\t\t\t\t THEN '&lt;div id=\"g[ModuleID,System][nPath]\" class=\"group\" Style=\"display:none;\" group=\"[ModuleID,System][nPath]\"&gt;'  \n\t\t\t\t ELSE '' \n\t\t\tEND +\n\t\t\tCASE WHEN (HasChild = 1) \n\t\t\t\t THEN '&lt;/div&gt;' \n\t\t\t\t ELSE CASE WHEN (NextLvl &lt; Lvl) \n\t\t\t\t\t   THEN REPLICATE ('&lt;/div&gt;',Lvl - NextLvl) \n\t\t\t\t\t   ELSE '' \n\t\t\t\t  END \n\t\t\t\t END + '&lt;/span&gt;',\n\tnPath = @CurrentNode + Path,\n * \nfrom \n\t@treeOrdered t \nWhere \n\tItemID &lt;&gt; @RootParentID"},"ActionType":"Template-Variable","ChildActions":[]},{"Index":10,"Level":0,"Parameters":{"Index":12,"VariableType":"&lt;QueryString&gt;","QuerySource":"depth","QueryTarget":"@depth","QueryTargetLeft":"'","QueryTargetRight":"'","QueryTargetEmpty":"1","Protected":true,"EscapeHTML":false,"EscapeListX":1,"Value":"Declare\n@ScopeID int, @ShowHidden int, @Depth int, @ItemID int, @CurrentNode varchar(100), @Currentlvl int, @RootLevel tinyint  \n\n-- These two settings must correllate to the content query you are using\nSET @ScopeID = [PortalID,System] -- PortalID for Tabs, ModuleID for Help_Category. \nSET @RootLevel = 0 -- Tabs is 0, Help_Category is 1\n\nSET @ShowHidden = 1\nSET @Depth = 1 -- levels of tree or branch that are retrieved in a single response. If set to \"2\" then every other level would use and AJAX fetch. If \"3\", then every third. If set to \"1\" the tree would be entirely AJAX driven.\nSET @ItemID = @id\nSET @CurrentNode = '@node'\nSET @Currentlvl = @level\n\ndeclare @ParentNode varchar(500)\nset @ParentNode = LEFT(@CurrentNode,PATINDEX('%.[0-9][0-9].[0-9][0-9].',@CurrentNode))\n\n\nDeclare @treeOrdered TABLE(\nOrderedId int identity primary key,\nItemID int not null,\nlvl int, \nNextLvl int,\nPath varchar(2000),\n[Name] varchar(50),\nHasChild tinyint\n,ParentItemID int,\nplvl int,\npPath varchar(2000),\nParentParentItemID int,\nppPath varchar(2000),\nShowTab bit,\nDisplayType int,\nTabID int\n)\n\ndeclare @tree table(\nTreeId int identity primary key,\nItemID int not null,\nlvl int, \nNextLvl Int,\nParentTreeId int,\nPath varchar(2000),\nItemID_Path varchar(2000),\n[Name] varchar(50),\n[Order] int, \nVisible int,\nDeleted int,\nHasChild tinyint,\nOrderedId int\n,ParentItemID int,\nShowTab bit,\nDisplayType int,\nTabID int\n) \n\n\ndeclare @rowcount int, @lvl int, @RootParentID int,  @intCounter int\n\nSet @intCounter = 0\nSet @RootParentID = CASE WHEN @ItemID IS NOT NULL THEN @ItemID ELSE -1 END -- ELSE value must reflect the parentID value for root items. NULL is already handled\nset @lvl= ISNULL(@Currentlvl,0) + @RootLevel + CASE WHEN @ItemID IS NOT NULL AND @RootLevel = 0 THEN 1 ELSE 0 END\nSet @Depth = @Depth + ISNULL(@Currentlvl,0) + @RootLevel +  CASE WHEN @ItemID IS NOT NULL AND @RootLevel = 0 THEN 1 ELSE 0 END\n\ninsert into @tree(ItemID,lvl) values (@RootParentID,@lvl)\n\nset @rowcount=@@ROWCOUNT\n\n\nupdate @tree set Path=str(TreeId,10,0) + '.', ItemID_Path=cast(ItemID as varchar(10)) + '/'\n\nwhile @rowcount&gt;0 \nbegin\n\n\t\tinsert into @tree(ItemID, lvl, ParentTreeId, [Name], [Order], Visible, Deleted, HasChild,ParentItemID,ShowTab,DisplayType,TabID)\n\n---------- Begin Content Query  -------  Be sure to @ScopeID &amp; @RootLevel properly reflect the active query ---------------\n-- Query for Tabs\n\t\tselect \n\t\t\tc.TabID,\n\t\t\tc.[Level],\n\t\t\tt.treeId, \n\t\t\tc.TabName, \n\t\t\tc.TabOrder,\n\t\t\tc.IsVisible,\n\t\t\tc.IsDeleted,\n\t\t\tCASE WHEN c.[Level] = (@Depth - 1) THEN CASE WHEN (Select TOP 1 '1' from [databaseOwner,System][objectQualifier,System]Tabs t Where t.ParentID = c.TabID)= 1 THEN 1 ELSE 0 END ELSE NULL END,\n\t\t\tc.ParentId,\n\t\t\tc.IsVisible,\n\t\t\tc.IsVisible,\n\t\t\tc.TabID\n\t\tfrom \n\t\t\t[databaseOwner,System][objectQualifier,System]Tabs c\n\t\t\t\tInner Join @tree t \n\t\t\t\t\ton t.ItemID = ISNULL(c.ParentID,-1)\n\t\twhere \n\t\t\tc.PortalID = @ScopeID \n\t\t\tAND c.IsDeleted = 0 \n\t\t\tAND c.[Level] &lt; @Depth \n\t\t\tAND  c.[Level] = @lvl\n\t\t\tAND TabOrder &lt; 10000\n\t\torder by c.TabOrder,c.TabName, c.[level]\n\n----------- End Content Query   -------\n\n\tupdate t1 set t1.Path=t2.Path + str(t1.TreeId,10,0)+'.', \n\t\t      t1.ItemID_Path=t2.ItemID_Path + cast(t1.ItemID as varchar(10))+'/'\n\t\tfrom @tree t1 inner join @tree t2 on t1.ParentTreeId=t2.TreeId\n\t\twhere t1.lvl=@lvl and t2.ItemID_Path not like  cast(t1.ItemID as varchar(10)) + '/%'\n\t\n\tset @rowcount=@@ROWCOUNT\n\tset @lvl=@lvl+1\t\n\nend\n\nInsert into @treeOrdered (ItemID,lvl,Path,[Name],HasChild,ShowTab,DisplayType,TabID)\nSelect  ItemID, lvl, REPLACE(REPLACE(Path,'        ',''),' ',0), [Name], HasChild,ShowTab,DisplayType,TabID From @tree order by Path\n\nUpdate t4 Set NextLvl = t5.lvl\nFrom @treeOrdered t4 inner join @treeOrdered t5 ON (t4.OrderedId + 1) = t5.OrderedId\n\nUpdate o set o.ParentItemID = t.ItemID, o.pPath =@CurrentNode , o.pLvl = t.Lvl - 1\nFROM @treeOrdered o JOIN @tree x on x.ItemID = o.ItemID\nJOIN @tree t on t.ItemID = x.ParentItemID\n\ndeclare @ParentParentItemID varchar(10)\nselect @ParentParentItemID = p.ParentID from tabs c\nJOIN  tabs p on\nc.TabID = @RootParentID and p.TabID = c.ParentID\n\nSET @ParentParentItemID = CASE WHEN @ParentParentItemID  is null THEN '' ELSE @ParentParentItemID  END\n\nSelect \n\tisDefault = CASE WHEN isnull(t.DisplayType,0)=0 then 'selected' ELSE '' END,\n\tisLinks = CASE WHEN isnull(t.DisplayType,0)=1 then 'selected' ELSE '' END,\n\tisImages = CASE WHEN isnull(t.DisplayType,0)=1 then 'selected' ELSE '' END,\n\tisCheckedI = CASE WHEN isnull(t.ShowTab,0)=0 THEN '&lt;i&gt;' ELSE '' END,\n\tisCheckedEI = CASE WHEN isnull(t.ShowTab,0)=0 THEN '&lt;/i&gt;' ELSE '' END,\n\tisChecked = CASE WHEN isnull(t.ShowTab,0)=1 THEN 'checked' else '' END,\n\tnpPath = CASE WHEN pPath is null THEN 'mzTree' ELSE 'g[ModuleID,System]' + pPath END,\n\tnppPath = 'mzTree', \n\tItemEditor = CASE WHEN @edit = ItemID THEN '\\[EditSyntax,Action\\]' ELSE '&lt;div class=''name''&gt;&lt;a href=# onclick=\"document.getElementById(''nav[nPath]'').style.display = ''block'';return false;\"&gt;\\[isCheckedI\\]' +  [Name] +  '\\[isCheckedEI\\]&lt;/a&gt;&lt;/div&gt;&lt;div id=nav[nPath] style=''display: none;''&gt;[actionitem]&lt;/div&gt;' END,\n\tSaveItem = CASE WHEN @edit = ItemID THEN '&lt;br&gt;&lt;center&gt;&lt;a class=CommandButton href=# onclick=\"if(document.getElementById(''gAddName[ItemID]'').value == '''') {alert(''Name can not be blank.'');}  else {lxFetch([ModuleID,System],CURRENTPAGE[ModuleID,System],''save=\\[ItemID\\]&amp;node=[pPath]&amp;id=[ParentItemID]&amp;lvl=[plvl]'',''[npPath]'');}\" &gt;Save&lt;/a&gt; | &lt;a class=CommandButton href=\"javascript:lxFetch([ModuleID,System],CURRENTPAGE[ModuleID,System],''node=[pPath]&amp;id=[ParentItemID]&amp;lvl=[plvl]'',''[npPath]'');\" &gt;Cancel&lt;/a&gt;&lt;/center&gt;' ELSE '' END,\n\tActionItem = '\\[ActionSyntax,Action\\]',\n\tItem = '&lt;span id=\"s[ModuleID,System][nPath]\"&gt;&lt;div class=fldr&gt;' +\n\t\t\tCASE WHEN (NextLvl &gt; Lvl) OR (HasChild = 1)\n\t\t\t\tTHEN '&lt;div class=\"exp closed\" id=\"[ModuleID,System][nPath]\" ' + \n\t\t\t\t\t CASE WHEN (HasChild = 1) \n\t\t\t\t\t  THEN 'onclick=\"if (this.style.display !=''block'') lxFetch([*ModuleID],0,''node=[nPath]&amp;id=[ItemID]&amp;lvl=[lvl]'',''g[ModuleID,System][nPath]''); mzExp[ModuleID,System](''[ModuleID,System][nPath]'',''s[ModuleID,System][nPath]'',''DIV'',''group'',false,false,false);\"' \n\t\t\t\t\t  ELSE 'onclick=\"mzExp[ModuleID,System](''[ModuleID,System][nPath]'',''s[ModuleID,System][nPath]'',''DIV'',''group'',false,false,false);' \n\t\t\t\t\t END \n\t\t\t\t+ '\" &gt;&lt;/div&gt;'\n\t\t\t\tELSE '&lt;div class=\"exp empty\" &gt;&lt;/div&gt;' \n\t\t\tEND \n\t\t\t+ '[ItemEditor][SaveItem]&lt;/div&gt;' +\n\t\t\tCASE WHEN (NextLvl &gt; Lvl) OR (HasChild = 1) \n\t\t\t\t THEN '&lt;div id=\"g[ModuleID,System][nPath]\" class=\"group\" Style=\"display:none;\" group=\"[ModuleID,System][nPath]\"&gt;'  \n\t\t\t\t ELSE '' \n\t\t\tEND +\n\t\t\tCASE WHEN (HasChild = 1) \n\t\t\t\t THEN '&lt;/div&gt;' \n\t\t\t\t ELSE CASE WHEN (NextLvl &lt; Lvl) \n\t\t\t\t\t   THEN REPLICATE ('&lt;/div&gt;',Lvl - NextLvl) \n\t\t\t\t\t   ELSE '' \n\t\t\t\t  END \n\t\t\t\t END + '&lt;/span&gt;',\n\tnPath = @CurrentNode + Path,\n * \nfrom \n\t@treeOrdered t \nWhere \n\tItemID &lt;&gt; @RootParentID"},"ActionType":"Template-Variable","ChildActions":[]},{"Index":11,"Level":0,"Parameters":{"Index":16,"VariableType":"&lt;QueryString&gt;","QuerySource":"node","QueryTarget":"@node","QueryTargetLeft":"","QueryTargetRight":"","QueryTargetEmpty":"","Protected":true,"EscapeHTML":false,"EscapeListX":1,"Value":"Declare\n@ScopeID int, @ShowHidden int, @Depth int, @ItemID int, @CurrentNode varchar(100), @Currentlvl int, @RootLevel tinyint  \n\n-- These two settings must correllate to the content query you are using\nSET @ScopeID = [PortalID,System] -- PortalID for Tabs, ModuleID for Help_Category. \nSET @RootLevel = 0 -- Tabs is 0, Help_Category is 1\n\nSET @ShowHidden = 1\nSET @Depth = 1 -- levels of tree or branch that are retrieved in a single response. If set to \"2\" then every other level would use and AJAX fetch. If \"3\", then every third. If set to \"1\" the tree would be entirely AJAX driven.\nSET @ItemID = @id\nSET @CurrentNode = '@node'\nSET @Currentlvl = @level\n\ndeclare @ParentNode varchar(500)\nset @ParentNode = LEFT(@CurrentNode,PATINDEX('%.[0-9][0-9].[0-9][0-9].',@CurrentNode))\n\n\nDeclare @treeOrdered TABLE(\nOrderedId int identity primary key,\nItemID int not null,\nlvl int, \nNextLvl int,\nPath varchar(2000),\n[Name] varchar(50),\nHasChild tinyint\n,ParentItemID int,\nplvl int,\npPath varchar(2000),\nParentParentItemID int,\nppPath varchar(2000),\nShowTab bit,\nDisplayType int,\nTabID int\n)\n\ndeclare @tree table(\nTreeId int identity primary key,\nItemID int not null,\nlvl int, \nNextLvl Int,\nParentTreeId int,\nPath varchar(2000),\nItemID_Path varchar(2000),\n[Name] varchar(50),\n[Order] int, \nVisible int,\nDeleted int,\nHasChild tinyint,\nOrderedId int\n,ParentItemID int,\nShowTab bit,\nDisplayType int,\nTabID int\n) \n\n\ndeclare @rowcount int, @lvl int, @RootParentID int,  @intCounter int\n\nSet @intCounter = 0\nSet @RootParentID = CASE WHEN @ItemID IS NOT NULL THEN @ItemID ELSE -1 END -- ELSE value must reflect the parentID value for root items. NULL is already handled\nset @lvl= ISNULL(@Currentlvl,0) + @RootLevel + CASE WHEN @ItemID IS NOT NULL AND @RootLevel = 0 THEN 1 ELSE 0 END\nSet @Depth = @Depth + ISNULL(@Currentlvl,0) + @RootLevel +  CASE WHEN @ItemID IS NOT NULL AND @RootLevel = 0 THEN 1 ELSE 0 END\n\ninsert into @tree(ItemID,lvl) values (@RootParentID,@lvl)\n\nset @rowcount=@@ROWCOUNT\n\n\nupdate @tree set Path=str(TreeId,10,0) + '.', ItemID_Path=cast(ItemID as varchar(10)) + '/'\n\nwhile @rowcount&gt;0 \nbegin\n\n\t\tinsert into @tree(ItemID, lvl, ParentTreeId, [Name], [Order], Visible, Deleted, HasChild,ParentItemID,ShowTab,DisplayType,TabID)\n\n---------- Begin Content Query  -------  Be sure to @ScopeID &amp; @RootLevel properly reflect the active query ---------------\n-- Query for Tabs\n\t\tselect \n\t\t\tc.TabID,\n\t\t\tc.[Level],\n\t\t\tt.treeId, \n\t\t\tc.TabName, \n\t\t\tc.TabOrder,\n\t\t\tc.IsVisible,\n\t\t\tc.IsDeleted,\n\t\t\tCASE WHEN c.[Level] = (@Depth - 1) THEN CASE WHEN (Select TOP 1 '1' from [databaseOwner,System][objectQualifier,System]Tabs t Where t.ParentID = c.TabID)= 1 THEN 1 ELSE 0 END ELSE NULL END,\n\t\t\tc.ParentId,\n\t\t\tc.IsVisible,\n\t\t\tc.IsVisible,\n\t\t\tc.TabID\n\t\tfrom \n\t\t\t[databaseOwner,System][objectQualifier,System]Tabs c\n\t\t\t\tInner Join @tree t \n\t\t\t\t\ton t.ItemID = ISNULL(c.ParentID,-1)\n\t\twhere \n\t\t\tc.PortalID = @ScopeID \n\t\t\tAND c.IsDeleted = 0 \n\t\t\tAND c.[Level] &lt; @Depth \n\t\t\tAND  c.[Level] = @lvl\n\t\t\tAND TabOrder &lt; 10000\n\t\torder by c.TabOrder,c.TabName, c.[level]\n\n----------- End Content Query   -------\n\n\tupdate t1 set t1.Path=t2.Path + str(t1.TreeId,10,0)+'.', \n\t\t      t1.ItemID_Path=t2.ItemID_Path + cast(t1.ItemID as varchar(10))+'/'\n\t\tfrom @tree t1 inner join @tree t2 on t1.ParentTreeId=t2.TreeId\n\t\twhere t1.lvl=@lvl and t2.ItemID_Path not like  cast(t1.ItemID as varchar(10)) + '/%'\n\t\n\tset @rowcount=@@ROWCOUNT\n\tset @lvl=@lvl+1\t\n\nend\n\nInsert into @treeOrdered (ItemID,lvl,Path,[Name],HasChild,ShowTab,DisplayType,TabID)\nSelect  ItemID, lvl, REPLACE(REPLACE(Path,'        ',''),' ',0), [Name], HasChild,ShowTab,DisplayType,TabID From @tree order by Path\n\nUpdate t4 Set NextLvl = t5.lvl\nFrom @treeOrdered t4 inner join @treeOrdered t5 ON (t4.OrderedId + 1) = t5.OrderedId\n\nUpdate o set o.ParentItemID = t.ItemID, o.pPath =@CurrentNode , o.pLvl = t.Lvl - 1\nFROM @treeOrdered o JOIN @tree x on x.ItemID = o.ItemID\nJOIN @tree t on t.ItemID = x.ParentItemID\n\ndeclare @ParentParentItemID varchar(10)\nselect @ParentParentItemID = p.ParentID from tabs c\nJOIN  tabs p on\nc.TabID = @RootParentID and p.TabID = c.ParentID\n\nSET @ParentParentItemID = CASE WHEN @ParentParentItemID  is null THEN '' ELSE @ParentParentItemID  END\n\nSelect \n\tisDefault = CASE WHEN isnull(t.DisplayType,0)=0 then 'selected' ELSE '' END,\n\tisLinks = CASE WHEN isnull(t.DisplayType,0)=1 then 'selected' ELSE '' END,\n\tisImages = CASE WHEN isnull(t.DisplayType,0)=1 then 'selected' ELSE '' END,\n\tisCheckedI = CASE WHEN isnull(t.ShowTab,0)=0 THEN '&lt;i&gt;' ELSE '' END,\n\tisCheckedEI = CASE WHEN isnull(t.ShowTab,0)=0 THEN '&lt;/i&gt;' ELSE '' END,\n\tisChecked = CASE WHEN isnull(t.ShowTab,0)=1 THEN 'checked' else '' END,\n\tnpPath = CASE WHEN pPath is null THEN 'mzTree' ELSE 'g[ModuleID,System]' + pPath END,\n\tnppPath = 'mzTree', \n\tItemEditor = CASE WHEN @edit = ItemID THEN '\\[EditSyntax,Action\\]' ELSE '&lt;div class=''name''&gt;&lt;a href=# onclick=\"document.getElementById(''nav[nPath]'').style.display = ''block'';return false;\"&gt;\\[isCheckedI\\]' +  [Name] +  '\\[isCheckedEI\\]&lt;/a&gt;&lt;/div&gt;&lt;div id=nav[nPath] style=''display: none;''&gt;[actionitem]&lt;/div&gt;' END,\n\tSaveItem = CASE WHEN @edit = ItemID THEN '&lt;br&gt;&lt;center&gt;&lt;a class=CommandButton href=# onclick=\"if(document.getElementById(''gAddName[ItemID]'').value == '''') {alert(''Name can not be blank.'');}  else {lxFetch([ModuleID,System],CURRENTPAGE[ModuleID,System],''save=\\[ItemID\\]&amp;node=[pPath]&amp;id=[ParentItemID]&amp;lvl=[plvl]'',''[npPath]'');}\" &gt;Save&lt;/a&gt; | &lt;a class=CommandButton href=\"javascript:lxFetch([ModuleID,System],CURRENTPAGE[ModuleID,System],''node=[pPath]&amp;id=[ParentItemID]&amp;lvl=[plvl]'',''[npPath]'');\" &gt;Cancel&lt;/a&gt;&lt;/center&gt;' ELSE '' END,\n\tActionItem = '\\[ActionSyntax,Action\\]',\n\tItem = '&lt;span id=\"s[ModuleID,System][nPath]\"&gt;&lt;div class=fldr&gt;' +\n\t\t\tCASE WHEN (NextLvl &gt; Lvl) OR (HasChild = 1)\n\t\t\t\tTHEN '&lt;div class=\"exp closed\" id=\"[ModuleID,System][nPath]\" ' + \n\t\t\t\t\t CASE WHEN (HasChild = 1) \n\t\t\t\t\t  THEN 'onclick=\"if (this.style.display !=''block'') lxFetch([*ModuleID],0,''node=[nPath]&amp;id=[ItemID]&amp;lvl=[lvl]'',''g[ModuleID,System][nPath]''); mzExp[ModuleID,System](''[ModuleID,System][nPath]'',''s[ModuleID,System][nPath]'',''DIV'',''group'',false,false,false);\"' \n\t\t\t\t\t  ELSE 'onclick=\"mzExp[ModuleID,System](''[ModuleID,System][nPath]'',''s[ModuleID,System][nPath]'',''DIV'',''group'',false,false,false);' \n\t\t\t\t\t END \n\t\t\t\t+ '\" &gt;&lt;/div&gt;'\n\t\t\t\tELSE '&lt;div class=\"exp empty\" &gt;&lt;/div&gt;' \n\t\t\tEND \n\t\t\t+ '[ItemEditor][SaveItem]&lt;/div&gt;' +\n\t\t\tCASE WHEN (NextLvl &gt; Lvl) OR (HasChild = 1) \n\t\t\t\t THEN '&lt;div id=\"g[ModuleID,System][nPath]\" class=\"group\" Style=\"display:none;\" group=\"[ModuleID,System][nPath]\"&gt;'  \n\t\t\t\t ELSE '' \n\t\t\tEND +\n\t\t\tCASE WHEN (HasChild = 1) \n\t\t\t\t THEN '&lt;/div&gt;' \n\t\t\t\t ELSE CASE WHEN (NextLvl &lt; Lvl) \n\t\t\t\t\t   THEN REPLICATE ('&lt;/div&gt;',Lvl - NextLvl) \n\t\t\t\t\t   ELSE '' \n\t\t\t\t  END \n\t\t\t\t END + '&lt;/span&gt;',\n\tnPath = @CurrentNode + Path,\n * \nfrom \n\t@treeOrdered t \nWhere \n\tItemID &lt;&gt; @RootParentID"},"ActionType":"Template-Variable","ChildActions":[]},{"Index":12,"Level":0,"Parameters":{"Index":21,"VariableType":"&lt;QueryString&gt;","QuerySource":"id","QueryTarget":"@id","QueryTargetLeft":"","QueryTargetRight":"","QueryTargetEmpty":"NULL","Protected":true,"EscapeHTML":false,"EscapeListX":1,"Value":"Declare\n@ScopeID int, @ShowHidden int, @Depth int, @ItemID int, @CurrentNode varchar(100), @Currentlvl int, @RootLevel tinyint  \n\n-- These two settings must correllate to the content query you are using\nSET @ScopeID = [PortalID,System] -- PortalID for Tabs, ModuleID for Help_Category. \nSET @RootLevel = 0 -- Tabs is 0, Help_Category is 1\n\nSET @ShowHidden = 1\nSET @Depth = 1 -- levels of tree or branch that are retrieved in a single response. If set to \"2\" then every other level would use and AJAX fetch. If \"3\", then every third. If set to \"1\" the tree would be entirely AJAX driven.\nSET @ItemID = @id\nSET @CurrentNode = '@node'\nSET @Currentlvl = @level\n\ndeclare @ParentNode varchar(500)\nset @ParentNode = LEFT(@CurrentNode,PATINDEX('%.[0-9][0-9].[0-9][0-9].',@CurrentNode))\n\n\nDeclare @treeOrdered TABLE(\nOrderedId int identity primary key,\nItemID int not null,\nlvl int, \nNextLvl int,\nPath varchar(2000),\n[Name] varchar(50),\nHasChild tinyint\n,ParentItemID int,\nplvl int,\npPath varchar(2000),\nParentParentItemID int,\nppPath varchar(2000),\nShowTab bit,\nDisplayType int,\nTabID int\n)\n\ndeclare @tree table(\nTreeId int identity primary key,\nItemID int not null,\nlvl int, \nNextLvl Int,\nParentTreeId int,\nPath varchar(2000),\nItemID_Path varchar(2000),\n[Name] varchar(50),\n[Order] int, \nVisible int,\nDeleted int,\nHasChild tinyint,\nOrderedId int\n,ParentItemID int,\nShowTab bit,\nDisplayType int,\nTabID int\n) \n\n\ndeclare @rowcount int, @lvl int, @RootParentID int,  @intCounter int\n\nSet @intCounter = 0\nSet @RootParentID = CASE WHEN @ItemID IS NOT NULL THEN @ItemID ELSE -1 END -- ELSE value must reflect the parentID value for root items. NULL is already handled\nset @lvl= ISNULL(@Currentlvl,0) + @RootLevel + CASE WHEN @ItemID IS NOT NULL AND @RootLevel = 0 THEN 1 ELSE 0 END\nSet @Depth = @Depth + ISNULL(@Currentlvl,0) + @RootLevel +  CASE WHEN @ItemID IS NOT NULL AND @RootLevel = 0 THEN 1 ELSE 0 END\n\ninsert into @tree(ItemID,lvl) values (@RootParentID,@lvl)\n\nset @rowcount=@@ROWCOUNT\n\n\nupdate @tree set Path=str(TreeId,10,0) + '.', ItemID_Path=cast(ItemID as varchar(10)) + '/'\n\nwhile @rowcount&gt;0 \nbegin\n\n\t\tinsert into @tree(ItemID, lvl, ParentTreeId, [Name], [Order], Visible, Deleted, HasChild,ParentItemID,ShowTab,DisplayType,TabID)\n\n---------- Begin Content Query  -------  Be sure to @ScopeID &amp; @RootLevel properly reflect the active query ---------------\n-- Query for Tabs\n\t\tselect \n\t\t\tc.TabID,\n\t\t\tc.[Level],\n\t\t\tt.treeId, \n\t\t\tc.TabName, \n\t\t\tc.TabOrder,\n\t\t\tc.IsVisible,\n\t\t\tc.IsDeleted,\n\t\t\tCASE WHEN c.[Level] = (@Depth - 1) THEN CASE WHEN (Select TOP 1 '1' from [databaseOwner,System][objectQualifier,System]Tabs t Where t.ParentID = c.TabID)= 1 THEN 1 ELSE 0 END ELSE NULL END,\n\t\t\tc.ParentId,\n\t\t\tc.IsVisible,\n\t\t\tc.IsVisible,\n\t\t\tc.TabID\n\t\tfrom \n\t\t\t[databaseOwner,System][objectQualifier,System]Tabs c\n\t\t\t\tInner Join @tree t \n\t\t\t\t\ton t.ItemID = ISNULL(c.ParentID,-1)\n\t\twhere \n\t\t\tc.PortalID = @ScopeID \n\t\t\tAND c.IsDeleted = 0 \n\t\t\tAND c.[Level] &lt; @Depth \n\t\t\tAND  c.[Level] = @lvl\n\t\t\tAND TabOrder &lt; 10000\n\t\torder by c.TabOrder,c.TabName, c.[level]\n\n----------- End Content Query   -------\n\n\tupdate t1 set t1.Path=t2.Path + str(t1.TreeId,10,0)+'.', \n\t\t      t1.ItemID_Path=t2.ItemID_Path + cast(t1.ItemID as varchar(10))+'/'\n\t\tfrom @tree t1 inner join @tree t2 on t1.ParentTreeId=t2.TreeId\n\t\twhere t1.lvl=@lvl and t2.ItemID_Path not like  cast(t1.ItemID as varchar(10)) + '/%'\n\t\n\tset @rowcount=@@ROWCOUNT\n\tset @lvl=@lvl+1\t\n\nend\n\nInsert into @treeOrdered (ItemID,lvl,Path,[Name],HasChild,ShowTab,DisplayType,TabID)\nSelect  ItemID, lvl, REPLACE(REPLACE(Path,'        ',''),' ',0), [Name], HasChild,ShowTab,DisplayType,TabID From @tree order by Path\n\nUpdate t4 Set NextLvl = t5.lvl\nFrom @treeOrdered t4 inner join @treeOrdered t5 ON (t4.OrderedId + 1) = t5.OrderedId\n\nUpdate o set o.ParentItemID = t.ItemID, o.pPath =@CurrentNode , o.pLvl = t.Lvl - 1\nFROM @treeOrdered o JOIN @tree x on x.ItemID = o.ItemID\nJOIN @tree t on t.ItemID = x.ParentItemID\n\ndeclare @ParentParentItemID varchar(10)\nselect @ParentParentItemID = p.ParentID from tabs c\nJOIN  tabs p on\nc.TabID = @RootParentID and p.TabID = c.ParentID\n\nSET @ParentParentItemID = CASE WHEN @ParentParentItemID  is null THEN '' ELSE @ParentParentItemID  END\n\nSelect \n\tisDefault = CASE WHEN isnull(t.DisplayType,0)=0 then 'selected' ELSE '' END,\n\tisLinks = CASE WHEN isnull(t.DisplayType,0)=1 then 'selected' ELSE '' END,\n\tisImages = CASE WHEN isnull(t.DisplayType,0)=1 then 'selected' ELSE '' END,\n\tisCheckedI = CASE WHEN isnull(t.ShowTab,0)=0 THEN '&lt;i&gt;' ELSE '' END,\n\tisCheckedEI = CASE WHEN isnull(t.ShowTab,0)=0 THEN '&lt;/i&gt;' ELSE '' END,\n\tisChecked = CASE WHEN isnull(t.ShowTab,0)=1 THEN 'checked' else '' END,\n\tnpPath = CASE WHEN pPath is null THEN 'mzTree' ELSE 'g[ModuleID,System]' + pPath END,\n\tnppPath = 'mzTree', \n\tItemEditor = CASE WHEN @edit = ItemID THEN '\\[EditSyntax,Action\\]' ELSE '&lt;div class=''name''&gt;&lt;a href=# onclick=\"document.getElementById(''nav[nPath]'').style.display = ''block'';return false;\"&gt;\\[isCheckedI\\]' +  [Name] +  '\\[isCheckedEI\\]&lt;/a&gt;&lt;/div&gt;&lt;div id=nav[nPath] style=''display: none;''&gt;[actionitem]&lt;/div&gt;' END,\n\tSaveItem = CASE WHEN @edit = ItemID THEN '&lt;br&gt;&lt;center&gt;&lt;a class=CommandButton href=# onclick=\"if(document.getElementById(''gAddName[ItemID]'').value == '''') {alert(''Name can not be blank.'');}  else {lxFetch([ModuleID,System],CURRENTPAGE[ModuleID,System],''save=\\[ItemID\\]&amp;node=[pPath]&amp;id=[ParentItemID]&amp;lvl=[plvl]'',''[npPath]'');}\" &gt;Save&lt;/a&gt; | &lt;a class=CommandButton href=\"javascript:lxFetch([ModuleID,System],CURRENTPAGE[ModuleID,System],''node=[pPath]&amp;id=[ParentItemID]&amp;lvl=[plvl]'',''[npPath]'');\" &gt;Cancel&lt;/a&gt;&lt;/center&gt;' ELSE '' END,\n\tActionItem = '\\[ActionSyntax,Action\\]',\n\tItem = '&lt;span id=\"s[ModuleID,System][nPath]\"&gt;&lt;div class=fldr&gt;' +\n\t\t\tCASE WHEN (NextLvl &gt; Lvl) OR (HasChild = 1)\n\t\t\t\tTHEN '&lt;div class=\"exp closed\" id=\"[ModuleID,System][nPath]\" ' + \n\t\t\t\t\t CASE WHEN (HasChild = 1) \n\t\t\t\t\t  THEN 'onclick=\"if (this.style.display !=''block'') lxFetch([*ModuleID],0,''node=[nPath]&amp;id=[ItemID]&amp;lvl=[lvl]'',''g[ModuleID,System][nPath]''); mzExp[ModuleID,System](''[ModuleID,System][nPath]'',''s[ModuleID,System][nPath]'',''DIV'',''group'',false,false,false);\"' \n\t\t\t\t\t  ELSE 'onclick=\"mzExp[ModuleID,System](''[ModuleID,System][nPath]'',''s[ModuleID,System][nPath]'',''DIV'',''group'',false,false,false);' \n\t\t\t\t\t END \n\t\t\t\t+ '\" &gt;&lt;/div&gt;'\n\t\t\t\tELSE '&lt;div class=\"exp empty\" &gt;&lt;/div&gt;' \n\t\t\tEND \n\t\t\t+ '[ItemEditor][SaveItem]&lt;/div&gt;' +\n\t\t\tCASE WHEN (NextLvl &gt; Lvl) OR (HasChild = 1) \n\t\t\t\t THEN '&lt;div id=\"g[ModuleID,System][nPath]\" class=\"group\" Style=\"display:none;\" group=\"[ModuleID,System][nPath]\"&gt;'  \n\t\t\t\t ELSE '' \n\t\t\tEND +\n\t\t\tCASE WHEN (HasChild = 1) \n\t\t\t\t THEN '&lt;/div&gt;' \n\t\t\t\t ELSE CASE WHEN (NextLvl &lt; Lvl) \n\t\t\t\t\t   THEN REPLICATE ('&lt;/div&gt;',Lvl - NextLvl) \n\t\t\t\t\t   ELSE '' \n\t\t\t\t  END \n\t\t\t\t END + '&lt;/span&gt;',\n\tnPath = @CurrentNode + Path,\n * \nfrom \n\t@treeOrdered t \nWhere \n\tItemID &lt;&gt; @RootParentID"},"ActionType":"Template-Variable","ChildActions":[]}]},{"Index":13,"Level":0,"Parameters":{"Name":"List Item Formatting (Templates)","RenderType":"0"},"ActionType":"Action-Region","ChildActions":[{"Index":14,"Level":0,"Parameters":{"LeftCondition":"[$resourceid:q,{LENGTH}]","RightCondition":"0","Operator":"=","IsAdvanced":"False"},"ActionType":"Condition-If","ChildActions":[{"Index":15,"Level":0,"Parameters":{"Type":"Query-Query","GroupStatement":"","GroupIndex":"","Value":"Declare\n@ScopeID int, @ShowHidden int, @Depth int, @ItemID int, @CurrentNode varchar(100), @Currentlvl int, @RootLevel tinyint  \n\n-- These two settings must correllate to the content query you are using\nSET @ScopeID = [PortalID,System] -- PortalID for Tabs, ModuleID for Help_Category. \nSET @RootLevel = 0 -- Tabs is 0, Help_Category is 1\n\nSET @ShowHidden = 1\nSET @Depth = 1 -- levels of tree or branch that are retrieved in a single response. If set to \"2\" then every other level would use and AJAX fetch. If \"3\", then every third. If set to \"1\" the tree would be entirely AJAX driven.\nSET @ItemID = @id\nSET @CurrentNode = '@node'\nSET @Currentlvl = @level\n\ndeclare @ParentNode varchar(500)\nset @ParentNode = LEFT(@CurrentNode,PATINDEX('%.[0-9][0-9].[0-9][0-9].',@CurrentNode))\n\n\nDeclare @treeOrdered TABLE(\nOrderedId int identity primary key,\nItemID int not null,\nlvl int, \nNextLvl int,\nPath varchar(2000),\n[Name] varchar(50),\nHasChild tinyint\n,ParentItemID int,\nplvl int,\npPath varchar(2000),\nParentParentItemID int,\nppPath varchar(2000),\nShowTab bit,\nDisplayType int,\nTabID int\n)\n\ndeclare @tree table(\nTreeId int identity primary key,\nItemID int not null,\nlvl int, \nNextLvl Int,\nParentTreeId int,\nPath varchar(2000),\nItemID_Path varchar(2000),\n[Name] varchar(50),\n[Order] int, \nVisible int,\nDeleted int,\nHasChild tinyint,\nOrderedId int\n,ParentItemID int,\nShowTab bit,\nDisplayType int,\nTabID int\n) \n\n\ndeclare @rowcount int, @lvl int, @RootParentID int,  @intCounter int\n\nSet @intCounter = 0\nSet @RootParentID = CASE WHEN @ItemID IS NOT NULL THEN @ItemID ELSE -1 END -- ELSE value must reflect the parentID value for root items. NULL is already handled\nset @lvl= ISNULL(@Currentlvl,0) + @RootLevel + CASE WHEN @ItemID IS NOT NULL AND @RootLevel = 0 THEN 1 ELSE 0 END\nSet @Depth = @Depth + ISNULL(@Currentlvl,0) + @RootLevel +  CASE WHEN @ItemID IS NOT NULL AND @RootLevel = 0 THEN 1 ELSE 0 END\n\ninsert into @tree(ItemID,lvl) values (@RootParentID,@lvl)\n\nset @rowcount=@@ROWCOUNT\n\n\nupdate @tree set Path=str(TreeId,10,0) + '.', ItemID_Path=cast(ItemID as varchar(10)) + '/'\n\nwhile @rowcount&gt;0 \nbegin\n\n\t\tinsert into @tree(ItemID, lvl, ParentTreeId, [Name], [Order], Visible, Deleted, HasChild,ParentItemID,ShowTab,DisplayType,TabID)\n\n---------- Begin Content Query  -------  Be sure to @ScopeID &amp; @RootLevel properly reflect the active query ---------------\n-- Query for Tabs\n\t\tselect \n\t\t\tc.TabID,\n\t\t\tc.[Level],\n\t\t\tt.treeId, \n\t\t\tc.TabName, \n\t\t\tc.TabOrder,\n\t\t\tc.IsVisible,\n\t\t\tc.IsDeleted,\n\t\t\tCASE WHEN c.[Level] = (@Depth - 1) THEN CASE WHEN (Select TOP 1 '1' from [databaseOwner,System][objectQualifier,System]Tabs t Where t.ParentID = c.TabID)= 1 THEN 1 ELSE 0 END ELSE NULL END,\n\t\t\tc.ParentId,\n\t\t\tc.IsVisible,\n\t\t\tc.IsVisible,\n\t\t\tc.TabID\n\t\tfrom \n\t\t\t[databaseOwner,System][objectQualifier,System]Tabs c\n\t\t\t\tInner Join @tree t \n\t\t\t\t\ton t.ItemID = ISNULL(c.ParentID,-1)\n\t\twhere \n\t\t\tc.PortalID = @ScopeID \n\t\t\tAND c.IsDeleted = 0 \n\t\t\tAND c.[Level] &lt; @Depth \n\t\t\tAND  c.[Level] = @lvl\n\t\t\tAND TabOrder &lt; 10000\n\t\torder by c.TabOrder,c.TabName, c.[level]\n\n----------- End Content Query   -------\n\n\tupdate t1 set t1.Path=t2.Path + str(t1.TreeId,10,0)+'.', \n\t\t      t1.ItemID_Path=t2.ItemID_Path + cast(t1.ItemID as varchar(10))+'/'\n\t\tfrom @tree t1 inner join @tree t2 on t1.ParentTreeId=t2.TreeId\n\t\twhere t1.lvl=@lvl and t2.ItemID_Path not like  cast(t1.ItemID as varchar(10)) + '/%'\n\t\n\tset @rowcount=@@ROWCOUNT\n\tset @lvl=@lvl+1\t\n\nend\n\nInsert into @treeOrdered (ItemID,lvl,Path,[Name],HasChild,ShowTab,DisplayType,TabID)\nSelect  ItemID, lvl, REPLACE(REPLACE(Path,'        ',''),' ',0), [Name], HasChild,ShowTab,DisplayType,TabID From @tree order by Path\n\nUpdate t4 Set NextLvl = t5.lvl\nFrom @treeOrdered t4 inner join @treeOrdered t5 ON (t4.OrderedId + 1) = t5.OrderedId\n\nUpdate o set o.ParentItemID = t.ItemID, o.pPath =@CurrentNode , o.pLvl = t.Lvl - 1\nFROM @treeOrdered o JOIN @tree x on x.ItemID = o.ItemID\nJOIN @tree t on t.ItemID = x.ParentItemID\n\ndeclare @ParentParentItemID varchar(10)\nselect @ParentParentItemID = p.ParentID from tabs c\nJOIN  tabs p on\nc.TabID = @RootParentID and p.TabID = c.ParentID\n\nSET @ParentParentItemID = CASE WHEN @ParentParentItemID  is null THEN '' ELSE @ParentParentItemID  END\n\nSelect \n\tisDefault = CASE WHEN isnull(t.DisplayType,0)=0 then 'selected' ELSE '' END,\n\tisLinks = CASE WHEN isnull(t.DisplayType,0)=1 then 'selected' ELSE '' END,\n\tisImages = CASE WHEN isnull(t.DisplayType,0)=1 then 'selected' ELSE '' END,\n\tisCheckedI = CASE WHEN isnull(t.ShowTab,0)=0 THEN '&lt;i&gt;' ELSE '' END,\n\tisCheckedEI = CASE WHEN isnull(t.ShowTab,0)=0 THEN '&lt;/i&gt;' ELSE '' END,\n\tisChecked = CASE WHEN isnull(t.ShowTab,0)=1 THEN 'checked' else '' END,\n\tnpPath = CASE WHEN pPath is null THEN 'mzTree' ELSE 'g[ModuleID,System]' + pPath END,\n\tnppPath = 'mzTree', \n\tItemEditor = '&lt;div class=''name''&gt;&lt;input type=\"checkbox\" onclick=\"pagecheck([ItemID]);\" name=\"pages\" id=\"pages[ItemID]\" value=\"[ItemID]\"/&gt;&lt;a href=# onclick=\"document.getElementById(''pages[ItemID]'').checked=true;pagecheck([ItemID]);return false;\"&gt;\\[isCheckedI\\]' +  [Name] +  '\\[isCheckedEI\\]&lt;/a&gt;&lt;/div&gt;&lt;div id=resources[ItemID]&gt;&lt;/div&gt;',\n\tSaveItem = '',\n\tActionItem = '\\[ActionSyntax,Action\\]',\n\tItem = '&lt;span id=\"s[ModuleID,System][nPath]\"&gt;&lt;div class=fldr&gt;' +\n\t\t\tCASE WHEN (NextLvl &gt; Lvl) OR (HasChild = 1)\n\t\t\t\tTHEN '&lt;div class=\"exp closed\" id=\"[ModuleID,System][nPath]\" ' + \n\t\t\t\t\t CASE WHEN (HasChild = 1) \n\t\t\t\t\t  THEN 'onclick=\"if (this.style.display !=''block'') lxFetch([*ModuleID],0,''node=[nPath]&amp;id=[ItemID]&amp;lvl=[lvl]'',''g[ModuleID,System][nPath]''); mzExp[ModuleID,System](''[ModuleID,System][nPath]'',''s[ModuleID,System][nPath]'',''DIV'',''group'',false,false,false);\"' \n\t\t\t\t\t  ELSE 'onclick=\"mzExp[ModuleID,System](''[ModuleID,System][nPath]'',''s[ModuleID,System][nPath]'',''DIV'',''group'',false,false,false);' \n\t\t\t\t\t END \n\t\t\t\t+ '\" &gt;&lt;/div&gt;'\n\t\t\t\tELSE '&lt;div class=\"exp empty\" &gt;&lt;/div&gt;' \n\t\t\tEND \n\t\t\t+ '[ItemEditor][SaveItem]&lt;/div&gt;' +\n\t\t\tCASE WHEN (NextLvl &gt; Lvl) OR (HasChild = 1) \n\t\t\t\t THEN '&lt;div id=\"g[ModuleID,System][nPath]\" class=\"group\" Style=\"display:none;\" group=\"[ModuleID,System][nPath]\"&gt;'  \n\t\t\t\t ELSE '' \n\t\t\tEND +\n\t\t\tCASE WHEN (HasChild = 1) \n\t\t\t\t THEN '&lt;/div&gt;' \n\t\t\t\t ELSE CASE WHEN (NextLvl &lt; Lvl) \n\t\t\t\t\t   THEN REPLICATE ('&lt;/div&gt;',Lvl - NextLvl) \n\t\t\t\t\t   ELSE '' \n\t\t\t\t  END \n\t\t\t\t END + '&lt;/span&gt;',\n\tnPath = @CurrentNode + Path,\n * \nfrom \n\t@treeOrdered t \nWhere \n\tItemID &lt;&gt; @RootParentID","Connection":"","Filter":""},"ActionType":"Template","ChildActions":[]},{"Index":16,"Level":0,"Parameters":{"Type":"Detail-Detail","GroupStatement":"","GroupIndex":"","Value":"[Item]"},"ActionType":"Template","ChildActions":[]},{"Index":17,"Level":0,"Parameters":{"Type":"Detail-NoResults","GroupStatement":"","GroupIndex":"","Value":"&lt;img src=\"http://[ALIAS,System]/images/spacer.gif\"&gt;"},"ActionType":"Template","ChildActions":[]}]},{"Index":18,"Level":0,"Parameters":{},"ActionType":"Condition-Else","ChildActions":[{"Index":19,"Level":0,"Parameters":{"VariableType":"&lt;QueryString&gt;","QuerySource":"resourceid","QueryTarget":"@resourceid","QueryTargetLeft":"'","QueryTargetRight":"'","QueryTargetEmpty":"NULL","EscapeListX":"2","Protected":"true","EscapeHTML":"true"},"ActionType":"Template-Variable","ChildActions":[]},{"Index":20,"Level":0,"Parameters":{"Type":"Query-Query","GroupStatement":"","GroupIndex":"","Value":"select \n\t* \nfrom \n\ttabmodules tm join \n\t\tmodules m on \n\t\t\tm.moduleid = tm.moduleid and \n\t\t\ttm.tabid = @resourceid and \n\t\t\tm.isdeleted = 0 \norder by PaneName,ModuleOrder","Connection":"","Filter":""},"ActionType":"Template","ChildActions":[{"Index":21,"Level":0,"Parameters":{"Type":"Group-Header","GroupStatement":"","GroupIndex":"0","Value":"&lt;div style=\"border: 1px solid #dddddd;font-family:arial; font-size: 11px;\"&gt;\n","Connection":"","Filter":""},"ActionType":"Template","ChildActions":[{"Index":22,"Level":0,"Parameters":{"Type":"Group-Header","GroupStatement":"[PaneName]","GroupIndex":"1","Value":"\t&lt;UL&gt;[PaneName]","Connection":"","Filter":""},"ActionType":"Template","ChildActions":[{"Index":23,"Level":0,"Parameters":{"Type":"Detail-Detail","GroupStatement":"","GroupIndex":"","Value":"&lt;li&gt;&lt;input type=\"checkbox\" id=\"modules[moduleid]\" name=\"modules\" value=\"[ModuleID]\"/&gt;[ModuleID] - [ModuleTitle]&lt;/li&gt;","Connection":"","Filter":""},"ActionType":"Template","ChildActions":[]}]},{"Index":24,"Level":0,"Parameters":{"Type":"Group-Footer","GroupStatement":"[PaneName]","GroupIndex":"1","Value":"&lt;/UL&gt;","Connection":"","Filter":""},"ActionType":"Template","ChildActions":[]}]},{"Index":25,"Level":0,"Parameters":{"Type":"Group-Footer","GroupStatement":"","GroupIndex":"0","Value":"&lt;/div&gt;","Connection":"","Filter":""},"ActionType":"Template","ChildActions":[]}]}]}]}]}]},{"Index":26,"Level":0,"Parameters":{},"ActionType":"Condition-Else","ChildActions":[{"Index":27,"Level":0,"Parameters":{"Name":"Query Variables and Default Formatting","RenderType":"0"},"ActionType":"Action-Region","ChildActions":[{"Index":28,"Level":0,"Parameters":{"Name":"Query Variable Definitions","RenderType":"0"},"ActionType":"Action-Region","ChildActions":[{"Index":29,"Level":0,"Parameters":{"Index":0,"VariableType":"&lt;QueryString&gt;","QuerySource":"Package","QueryTarget":"@PackageID","QueryTargetLeft":"'","QueryTargetRight":"'","QueryTargetEmpty":"NULL","Protected":"true","EscapeHTML":"false","EscapeListX":"2","Value":"Select \n\tp.PackageID PPackageID,\n\tp.Name PName,\n\tp.Description PDescription,\n\tp.Company PCompany,\n\tp.Author PAuthor,\n\tp.Version PVersion,\n\tp.UniqueID PUniqueID,\n\tp.Status PStatus,\n\tp.StatusDate PStatusDate,\n\tp.StatusMessage PStatusMessage,\n\n\tpi.*\n from \n\t[objectQualifier,System]xListSettings_Package   p JOIN\n\t[objectQualifier,System]xListSettings_PackageItem  pi ON\n\tpi.PackageID = p.PackageID and p.PackageID = @PackageID\n\tAND p.PortalID = [PortalID,System]\n order by SequenceNumber"},"ActionType":"Template-Variable","ChildActions":[]}]},{"Index":30,"Level":0,"Parameters":{"Name":"List Item Formatting (Templates)","RenderType":"0"},"ActionType":"Action-Region","ChildActions":[{"Index":31,"Level":0,"Parameters":{"Type":"Query-Query","GroupStatement":"","GroupIndex":"","Value":"Select \n\tp.PackageID PPackageID,\n\tp.Name PName,\n\tp.Description PDescription,\n\tp.Company PCompany,\n\tp.Author PAuthor,\n\tp.Version PVersion,\n\tp.UniqueID PUniqueID,\n\tp.Status PStatus,\n\tp.StatusDate PStatusDate,\n\tp.StatusMessage PStatusMessage,\n\n\tpi.*\n from \n\t[objectQualifier,System]OpenWebStudio_Package   p JOIN\n\t[objectQualifier,System]OpenWebStudio_PackageItem  pi ON\n\tpi.PackageID = p.PackageID and p.PackageID = @PackageID\n\tAND p.PortalID = [PortalID,System]\n order by SequenceNumber","Connection":"","Filter":""},"ActionType":"Template","ChildActions":[]},{"Index":32,"Level":0,"Parameters":{"Type":"Group-Header","GroupStatement":"Header/Footer - Package Information","GroupIndex":"0","Value":"&lt;TABLE class=Normal Style=\"width:100%; border: 1px solid #cccccc; font-size: 100%;\"&gt;\n&lt;TR&gt;\n\t&lt;TD class=Normal&gt;&lt;SPAN class=SubHead&gt;Package:&amp;nbsp;&lt;/span&gt;[PName] [PVersion]&lt;/TD&gt;\n{IIF,\"[$PCompany,{LENGTH}]+[$PAuthor,{LENGTH}]&gt;0\",\"\n\t&lt;TD class=Normal align=right&gt;&lt;SPAN class=SubHead&gt;Author:&amp;nbsp;&lt;/span&gt;\\[PCompany\\] \\[PAuthor\\]&lt;/TD&gt;\n\",\"&lt;TD&gt;&amp;nbsp;&lt;/td&gt;\"}\n&lt;/TR&gt;\n{IIF,\"[PStatus=1]\",\"\",\"\"}\n{IIF,\"[PStatus=2]\",\"\",\"\"}\n{IIF,\"[PStatus=3]\",\"\n&lt;TR&gt;\n&lt;TD class=NormalRed colspan=2 style=\\\"border: 1px solid red; background: #ffeeee;\\\"&gt;\n&lt;SPAN class=SubHead&gt;Failure:&amp;nbsp;&lt;/span&gt;\\[PStatusMessage\\]\n&lt;/TD&gt;\n&lt;/TR&gt;\n\",\"\"}\n\n&lt;/TABLE&gt;\n&lt;br&gt;\n&lt;TABLE class=Normal Style=\"width:100%; border: 1px solid #cccccc; font-size: 70%;\"&gt;\n&lt;tr&gt;\n\t&lt;th style=\"width:40px;\" align=right&gt;&amp;nbsp;&lt;/th&gt;\n\t&lt;td style=\"width:16px;\" &gt;&amp;nbsp;&lt;/th&gt;\n\t&lt;th&gt;Package Item&lt;/th&gt;\n\t&lt;th align=center style=\"width:90px;\"&gt;Status&lt;/th&gt;\n&lt;/tr&gt;"},"ActionType":"Template","ChildActions":[{"Index":33,"Level":0,"Parameters":{"Type":"Detail-Detail","GroupStatement":"","GroupIndex":"","Value":"&lt;tr&gt;\n\t&lt;td style=\"width:40px;\" align=right&gt;[SequenceNumber].&lt;/td&gt;\n\t&lt;td style=\"width:16px;\" &gt;\n\t&lt;img src=\"\n\t{IIF,\"'[$ItemType,{LEFT:1}]'='I\",\"[ApplicationPath,System]/images/icon_lists_16px.gif\",\"\"}\n\t{IIF,\"'[$ItemType,{LEFT:1}]'='C'\",\"[ApplicationPath,System]/images/xml.gif\",\"\"}\n\t{IIF,\"'[$ItemType,{LEFT:1}]'='P'\",\"[ApplicationPath,System]/images/xml.gif\",\"\"}\n\t{IIF,\"'[$ItemType,{LEFT:1}]'='R'\",\"[ApplicationPath,System]/images/file.gif\",\"\"}\n\t{IIF,\"'[$ItemType,{LEFT:1}]'='S'\",\"[ApplicationPath,System]/images/icon_sql_16px.gif\",\"\"}\n\t{IIF,\"'[$ItemType,{LEFT:1}]'='T'\",\"[ApplicationPath,System]/images/icon_tabs_16px.gif\",\"\"}\n\t{IIF,\"'[$ItemType,{LEFT:1}]'='M'\",\"[ApplicationPath,System]/images/icon_moduledefinitions_16px.gif\",\"\"}\n\t\" alt=[ItemType]&gt;\n\t&lt;/td&gt;\n\t&lt;td&gt;[ItemName] &lt;i&gt;[ItemDescription]&lt;/i&gt;&lt;/td&gt;\n\t&lt;td align=center style=\"width:90px;\"&gt;\n\t{IIF,\"'[Status]'='0'\",\"Initializing...\",\"\"}\n\t{IIF,\"'[Status]'='1'\",\"Loading...\",\"\"}\n\t{IIF,\"'[Status]'='2'\",\"&lt;b class=NormalBold&gt;Complete&lt;/ab&gt;\",\"\"}\n\t{IIF,\"'[Status]'='3'\",\"&lt;b class=NormalRed&gt;Failed&lt;/b&gt;\",\"\"}\n\t&lt;/td&gt;\n&lt;/tr&gt;\n{IIF,\"'[Status]'='3'\",\"\n&lt;TR&gt;\n&lt;td style=\\\"width:40px;\\\" align=right&gt;&amp;nbsp;&lt;/td&gt;\n&lt;td style=\\\"width:16px;\\\" &gt;\n&lt;img src=\\\"\\[ApplicationPath,System\\]/images/icon_exceptionviewer_16px.gif\\\"&gt;\n&lt;TD class=NormalRed colspan=2 style=\\\"border: 1px solid red; background: #ffeeee;\\\"&gt;\n&lt;SPAN class=SubHead&gt;Failure:&amp;nbsp;&lt;/span&gt;\\[StatusMessage\\]\n&lt;/TD&gt;\n&lt;/TR&gt;\n\",\"\"}"},"ActionType":"Template","ChildActions":[]}]},{"Index":34,"Level":0,"Parameters":{"Type":"Group-Footer","GroupStatement":"Header/Footer - Package Information","GroupIndex":"0","Value":"&lt;/TABLE&gt;"},"ActionType":"Template","ChildActions":[]}]}]}]}],"recordsPerPage":"0","enableAlphaFilter":"false","enablePageSelection":"false","enableRecordsPerPage":"false","enableCustomPaging":"false","enableExcelExport":false,"enableHide_OnNoQuery":false,"enableHide_OnNoResults":false,"enableAdvancedParsing":true,"enableCompoundIIFConditions":"true","enableQueryDebug":"false","enableQueryDebug_Edit":"false","enableQueryDebug_Admin":"false","enableQueryDebug_Super":"false","enableQueryDebug_Log":false,"enableQueryDebug_ErrorLog":false,"autoRefreshInterval":"","skipRedirectActions":"false","skipSubqueryDebugging":"false","enableAdmin_Edit":true,"enableAdmin_Admin":false,"enableAdmin_Super":false,"BotRecordCount":0,"BotPageVariableName":null,"enableBotShowAllRecords":false,"enableBotDetection":false,"BotNonAjaxText":null,"disableOpenScript":false,"enableSilverlight":false,"enableAJAX":"false","enableAJAXCustomPaging":"false","enableAJAXCustomStatus":"false","enableAJAXPageHistory":"false","customAJAXPageHistory":"","enableAJAXManual":"false","includeJavascriptUtilities":"false","includeJavascriptValidation":"false","javascriptOnComplete":"","enableMultipleColumnSorting":"false","ModuleCommunicationMessageType":"","showAll":"true","useExplicitSystemVariables":"true","enabledForcedQuerySplit":"false","query":null,"filter":null,"customConnection":null,"listItem":null,"listAItem":"","defaultItem":null,"noqueryItem":"","SearchQuery":"","SearchTitle":"","SearchLink":"","SearchAuthor":"","SearchDate":"","SearchKey":"","SearchContent":"","SearchDescription":"","Header":null,"Footer":null,"Title":null,"Version":"20","Index":"Package List"}</value>
  </data>
</root>